//First time I encountered this data structure. 
//Check out this amazing explanation! https://www.youtube.com/watch?v=AXjmTQ8LEoI
class Trie {
/** Initialize your data structure here. */
	private class TrieNode {
		Map<Character, TrieNode> children;
		boolean endOfWord;

		public TrieNode() {
			children = new HashMap<>();
			endOfWord = false;
		}
	}

	private final TrieNode root;

	public Trie() {
		root = new TrieNode();
	}

	/** Inserts a word into the trie. */
	public void insert(String word) {
		TrieNode current = root;
		for (int i = 0; i < word.length(); i++) {
			char ch = word.charAt(i);
			TrieNode node = current.children.get(ch);
			if (node == null) {
				node = new TrieNode();
				current.children.put(ch, node);
			}
			current = node;
		}
		current.endOfWord = true;
	}

	/** Returns if the word is in the trie. */
	public boolean search(String word) {
		TrieNode current = root;
		for (int i = 0; i < word.length(); i++) {
			char ch = word.charAt(i);
			TrieNode node = current.children.get(ch);
			// if node does not exist for given char then return false
			if (node == null) {
				return false;
			}
			current = node;
		}
		// return true of current's endOfWord is true else return false.
		return current.endOfWord;
	}

	/**
	 * Returns if there is any word in the trie that starts with the given prefix.
	 */
	public boolean startsWith(String prefix) {
		TrieNode current = root;
		{
			for (int i = 0; i < prefix.length(); i++) {
				char ch = prefix.charAt(i);
				TrieNode node = current.children.get(ch);
				if (node == null) {
					return false;
				}
				current = node;
			}
			return true;
		}
	}}
